# MediaPipe graph that performs selfie segmentation with TensorFlow Lite on CPU.

# CPU buffer. (ImageFrame)
input_stream: "input_video"

# Output image with rendered results. (ImageFrame)
output_stream: "output_video"

# Throttles the images flowing downstream for flow control. It passes through
# the very first incoming image unaltered, and waits for downstream nodes
# (calculators and subgraphs) in the graph to finish their tasks before it
# passes through another image. All images that come in while waiting are
# dropped, limiting the number of in-flight images in most part of the graph to
# 1. This prevents the downstream nodes from queuing up incoming images and data
# excessively, which leads to increased latency and memory usage, unwanted in
# real-time mobile applications. It also eliminates unnecessarily computation,
# e.g., the output produced by a node may get dropped downstream if the
# subsequent nodes are still busy processing previous inputs.
node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:output_video"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video"
}

# Subgraph that performs selfie segmentation.
# Input: ?
# Output: <ImageFrame> segmentation_mask
node {
  calculator: "SelfieSegmentationCpu"
  input_stream: "IMAGE:throttled_input_video"
  output_stream: "SEGMENTATION_MASK:new_mask"
}

# ------- smoothing mask calculator --------

node {
  calculator: "ToImageCalculator"
  input_stream: "IMAGE_CPU:new_mask"
  output_stream: "IMAGE:new_mask_image"
}

node {
 calculator: "SegmentationSmoothingCalculator"
 input_stream: "MASK:new_mask_image"
 input_stream: "MASK_PREVIOUS:old_mask"
 output_stream: "MASK_SMOOTHED:smooth_mask"
 options: {
   [mediapipe.SegmentationSmoothingCalculatorOptions.ext] {
     combine_with_previous_ratio: 0.7
   }
 }
}

# Caches the filtered segmentation mask, similar to above for the pose rect.
node {
  calculator: "PreviousLoopbackCalculator"
  input_stream: "MAIN:new_mask_image"
  input_stream: "LOOP:new_mask_image"
  input_stream_info: {
    tag_index: "LOOP"
    back_edge: true
  }
  output_stream: "PREV_LOOP:old_mask"
}

node {
  calculator: "FromImageCalculator"
  input_stream: "IMAGE:smooth_mask"
  output_stream: "IMAGE_CPU:smooth_mask_image_frame"
}


# ------- end smoothing mask calculator --------


# Colors the selfie segmentation with the color specified in the option. smooth_mask_image_frame
node {
  calculator: "RecolorCalculator"
  input_stream: "IMAGE:throttled_input_video"
  input_stream: "MASK:smooth_mask_image_frame"
  output_stream: "IMAGE:output_video"
  node_options: {
    [type.googleapis.com/mediapipe.RecolorCalculatorOptions] {
      color { r: 0 g: 0 b: 0 }
      mask_channel: RED
      invert_mask: true
      adjust_with_luminance: false
    }
  }
}
